name: Build and Deploy to Aliyun Container Registry

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # 阿里云容器镜像服务配置
  # REGISTRY: registry.cn-hangzhou.aliyuncs.com
  REGISTRY: crpi-rnj5shn1s8desszs.cn-heyuan.personal.cr.aliyuncs.com
  NAMESPACE: mingmad  # 请替换为你的命名空间
  IMAGE_NAME: mgo-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Start MySQL for tests
      run: |
        docker run -d --name test-mysql \
          -e MYSQL_ROOT_PASSWORD=123456 \
          -e MYSQL_DATABASE=mgo \
          -p 3306:3306 \
          mysql:8.0
        
        # Wait for MySQL to be ready
        until docker exec test-mysql mysqladmin ping -h localhost --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done
        
    - name: Run tests
      run: ./gradlew test
      
    - name: Stop MySQL
      run: docker stop test-mysql && docker rm test-mysql
      if: always()
      
    - name: Build application
      run: ./gradlew bootJar
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Print image info
      run: |
        echo "Images pushed:"
        echo "${{ steps.meta.outputs.tags }}"