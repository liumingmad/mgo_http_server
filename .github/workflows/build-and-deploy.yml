name: Build and Deploy to Aliyun Container Registry

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # 阿里云容器镜像服务配置
  # REGISTRY: registry.cn-hangzhou.aliyuncs.com
  REGISTRY: crpi-rnj5shn1s8desszs.cn-heyuan.personal.cr.aliyuncs.com
  NAMESPACE: mingmad  # 请替换为你的命名空间
  IMAGE_NAME: mgo-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/build.gradle') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Start MySQL for tests
      run: |
        docker run -d --name test-mysql \
          -e MYSQL_ROOT_PASSWORD=123456 \
          -e MYSQL_DATABASE=mgo \
          -p 3306:3306 \
          mysql:8.0
        
        # Wait for MySQL to be ready
        until docker exec test-mysql mysqladmin ping -h localhost --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done
        
    - name: Run tests
      run: ./gradlew test --build-cache --parallel --daemon
      
    - name: Cache test results
      uses: actions/cache@v4
      with:
        path: |
          build/test-results
          build/reports/tests
        key: ${{ runner.os }}-test-results-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-test-results-
          
    - name: Stop MySQL
      run: docker stop test-mysql && docker rm test-mysql
      if: always()
      
    - name: Build application
      run: ./gradlew bootJar --build-cache --parallel --daemon
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Print image info
      run: |
        echo "Images pushed:"
        echo "${{ steps.meta.outputs.tags }}"
        
    - name: Deploy to VPS
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # 创建应用目录
          mkdir -p /home/ming/mgo-app
          cd /home/ming/mgo-app
          
          # 检查并安装docker-compose（如果需要）
          # if ! command -v "docker compose" &> /dev/null && ! command -v docker-compose &> /dev/null; then
          #   echo "Installing docker-compose..."
          #   sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          #   sudo chmod +x /usr/local/bin/docker-compose
          # fi
          
          # 确定使用哪个compose命令
          # if command -v "docker compose" &> /dev/null; then
          #   COMPOSE_CMD="docker compose"
          # else
          #   COMPOSE_CMD="docker-compose"
          # fi
          COMPOSE_CMD="docker compose"
          
          # 创建生产环境docker-compose配置
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            mysql:
              image: mysql:8.0
              container_name: mgo-mysql
              environment:
                MYSQL_ROOT_PASSWORD: 123456
                MYSQL_DATABASE: mgo
              ports:
                - "3306:3306"
              volumes:
                - mysql_data:/var/lib/mysql
              networks:
                - mgo-network
              restart: unless-stopped

            app:
              image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
              container_name: mgo-app
              depends_on:
                - mysql
              ports:
                - "8080:8080"
              environment:
                SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mgo?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
              networks:
                - mgo-network
              restart: unless-stopped

          volumes:
            mysql_data:

          networks:
            mgo-network:
              driver: bridge
          EOF
          
          # 停止现有服务
          $COMPOSE_CMD -f docker-compose.prod.yml down || true
          
          # 登录阿里云镜像仓库
          echo "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}" | docker login --username ${{ secrets.ALIYUN_REGISTRY_USERNAME }} --password-stdin ${{ env.REGISTRY }}
          
          # 拉取最新镜像
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          
          # 启动服务
          $COMPOSE_CMD -f docker-compose.prod.yml up -d
          
          # 清理未使用的镜像
          docker image prune -f
          
          # 查看服务状态
          $COMPOSE_CMD -f docker-compose.prod.yml ps
          
          # 登出 Docker registry
          docker logout ${{ env.REGISTRY }}